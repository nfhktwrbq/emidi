
emidi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f8c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08001134  08001134  00011134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011b0  080011b0  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080011b0  080011b0  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011b0  080011b0  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011b0  080011b0  000111b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011b4  080011b4  000111b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080011b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000068  08001220  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08001220  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003cf5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000aab  00000000  00000000  00023d8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001a8  00000000  00000000  00024838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000140  00000000  00000000  000249e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ab8e  00000000  00000000  00024b20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000246a  00000000  00000000  0003f6ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e766  00000000  00000000  00041b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d027e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a90  00000000  00000000  000d02fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000068 	.word	0x20000068
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800111c 	.word	0x0800111c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	0800111c 	.word	0x0800111c

080001e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80001ec:	4b08      	ldr	r3, [pc, #32]	; (8000210 <SystemInit+0x28>)
 80001ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80001f2:	4a07      	ldr	r2, [pc, #28]	; (8000210 <SystemInit+0x28>)
 80001f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80001f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <SystemInit+0x28>)
 80001fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000202:	609a      	str	r2, [r3, #8]
#endif
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	e000ed00 	.word	0xe000ed00

08000214 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b087      	sub	sp, #28
 8000218:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800021a:	2300      	movs	r3, #0
 800021c:	613b      	str	r3, [r7, #16]
 800021e:	2300      	movs	r3, #0
 8000220:	617b      	str	r3, [r7, #20]
 8000222:	2302      	movs	r3, #2
 8000224:	60fb      	str	r3, [r7, #12]
 8000226:	2300      	movs	r3, #0
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	2302      	movs	r3, #2
 800022c:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800022e:	4b31      	ldr	r3, [pc, #196]	; (80002f4 <SystemCoreClockUpdate+0xe0>)
 8000230:	689b      	ldr	r3, [r3, #8]
 8000232:	f003 030c 	and.w	r3, r3, #12
 8000236:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8000238:	693b      	ldr	r3, [r7, #16]
 800023a:	2b04      	cmp	r3, #4
 800023c:	d007      	beq.n	800024e <SystemCoreClockUpdate+0x3a>
 800023e:	2b08      	cmp	r3, #8
 8000240:	d009      	beq.n	8000256 <SystemCoreClockUpdate+0x42>
 8000242:	2b00      	cmp	r3, #0
 8000244:	d13d      	bne.n	80002c2 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000246:	4b2c      	ldr	r3, [pc, #176]	; (80002f8 <SystemCoreClockUpdate+0xe4>)
 8000248:	4a2c      	ldr	r2, [pc, #176]	; (80002fc <SystemCoreClockUpdate+0xe8>)
 800024a:	601a      	str	r2, [r3, #0]
      break;
 800024c:	e03d      	b.n	80002ca <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800024e:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <SystemCoreClockUpdate+0xe4>)
 8000250:	4a2b      	ldr	r2, [pc, #172]	; (8000300 <SystemCoreClockUpdate+0xec>)
 8000252:	601a      	str	r2, [r3, #0]
      break;
 8000254:	e039      	b.n	80002ca <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000256:	4b27      	ldr	r3, [pc, #156]	; (80002f4 <SystemCoreClockUpdate+0xe0>)
 8000258:	685b      	ldr	r3, [r3, #4]
 800025a:	0d9b      	lsrs	r3, r3, #22
 800025c:	f003 0301 	and.w	r3, r3, #1
 8000260:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000262:	4b24      	ldr	r3, [pc, #144]	; (80002f4 <SystemCoreClockUpdate+0xe0>)
 8000264:	685b      	ldr	r3, [r3, #4]
 8000266:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800026a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d00c      	beq.n	800028c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000272:	4a23      	ldr	r2, [pc, #140]	; (8000300 <SystemCoreClockUpdate+0xec>)
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	fbb2 f3f3 	udiv	r3, r2, r3
 800027a:	4a1e      	ldr	r2, [pc, #120]	; (80002f4 <SystemCoreClockUpdate+0xe0>)
 800027c:	6852      	ldr	r2, [r2, #4]
 800027e:	0992      	lsrs	r2, r2, #6
 8000280:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000284:	fb02 f303 	mul.w	r3, r2, r3
 8000288:	617b      	str	r3, [r7, #20]
 800028a:	e00b      	b.n	80002a4 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800028c:	4a1b      	ldr	r2, [pc, #108]	; (80002fc <SystemCoreClockUpdate+0xe8>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	fbb2 f3f3 	udiv	r3, r2, r3
 8000294:	4a17      	ldr	r2, [pc, #92]	; (80002f4 <SystemCoreClockUpdate+0xe0>)
 8000296:	6852      	ldr	r2, [r2, #4]
 8000298:	0992      	lsrs	r2, r2, #6
 800029a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800029e:	fb02 f303 	mul.w	r3, r2, r3
 80002a2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80002a4:	4b13      	ldr	r3, [pc, #76]	; (80002f4 <SystemCoreClockUpdate+0xe0>)
 80002a6:	685b      	ldr	r3, [r3, #4]
 80002a8:	0c1b      	lsrs	r3, r3, #16
 80002aa:	f003 0303 	and.w	r3, r3, #3
 80002ae:	3301      	adds	r3, #1
 80002b0:	005b      	lsls	r3, r3, #1
 80002b2:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 80002b4:	697a      	ldr	r2, [r7, #20]
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80002bc:	4a0e      	ldr	r2, [pc, #56]	; (80002f8 <SystemCoreClockUpdate+0xe4>)
 80002be:	6013      	str	r3, [r2, #0]
      break;
 80002c0:	e003      	b.n	80002ca <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <SystemCoreClockUpdate+0xe4>)
 80002c4:	4a0d      	ldr	r2, [pc, #52]	; (80002fc <SystemCoreClockUpdate+0xe8>)
 80002c6:	601a      	str	r2, [r3, #0]
      break;
 80002c8:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80002ca:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <SystemCoreClockUpdate+0xe0>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	091b      	lsrs	r3, r3, #4
 80002d0:	f003 030f 	and.w	r3, r3, #15
 80002d4:	4a0b      	ldr	r2, [pc, #44]	; (8000304 <SystemCoreClockUpdate+0xf0>)
 80002d6:	5cd3      	ldrb	r3, [r2, r3]
 80002d8:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80002da:	4b07      	ldr	r3, [pc, #28]	; (80002f8 <SystemCoreClockUpdate+0xe4>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	693b      	ldr	r3, [r7, #16]
 80002e0:	fa22 f303 	lsr.w	r3, r2, r3
 80002e4:	4a04      	ldr	r2, [pc, #16]	; (80002f8 <SystemCoreClockUpdate+0xe4>)
 80002e6:	6013      	str	r3, [r2, #0]
}
 80002e8:	bf00      	nop
 80002ea:	371c      	adds	r7, #28
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40023800 	.word	0x40023800
 80002f8:	20000000 	.word	0x20000000
 80002fc:	00f42400 	.word	0x00f42400
 8000300:	007a1200 	.word	0x007a1200
 8000304:	0800113c 	.word	0x0800113c

08000308 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000308:	b480      	push	{r7}
 800030a:	b083      	sub	sp, #12
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000310:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000314:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000318:	f003 0301 	and.w	r3, r3, #1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d013      	beq.n	8000348 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000320:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000324:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000328:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800032c:	2b00      	cmp	r3, #0
 800032e:	d00b      	beq.n	8000348 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000330:	e000      	b.n	8000334 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000332:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000334:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0f9      	beq.n	8000332 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800033e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000342:	687a      	ldr	r2, [r7, #4]
 8000344:	b2d2      	uxtb	r2, r2
 8000346:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000348:	687b      	ldr	r3, [r7, #4]
}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr

08000356 <_write>:
#include "debug.h"
#include "stm32f4xx.h"
#include "system_stm32f4xx.h"

int _write(int file, char *ptr, int len)
{
 8000356:	b580      	push	{r7, lr}
 8000358:	b086      	sub	sp, #24
 800035a:	af00      	add	r7, sp, #0
 800035c:	60f8      	str	r0, [r7, #12]
 800035e:	60b9      	str	r1, [r7, #8]
 8000360:	607a      	str	r2, [r7, #4]
	int i = 0;
 8000362:	2300      	movs	r3, #0
 8000364:	617b      	str	r3, [r7, #20]
	for(i = 0; i < len; i++)
 8000366:	2300      	movs	r3, #0
 8000368:	617b      	str	r3, [r7, #20]
 800036a:	e009      	b.n	8000380 <_write+0x2a>
	{
		ITM_SendChar((*ptr++));
 800036c:	68bb      	ldr	r3, [r7, #8]
 800036e:	1c5a      	adds	r2, r3, #1
 8000370:	60ba      	str	r2, [r7, #8]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	4618      	mov	r0, r3
 8000376:	f7ff ffc7 	bl	8000308 <ITM_SendChar>
	for(i = 0; i < len; i++)
 800037a:	697b      	ldr	r3, [r7, #20]
 800037c:	3301      	adds	r3, #1
 800037e:	617b      	str	r3, [r7, #20]
 8000380:	697a      	ldr	r2, [r7, #20]
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	429a      	cmp	r2, r3
 8000386:	dbf1      	blt.n	800036c <_write+0x16>
	}
	return len;
 8000388:	687b      	ldr	r3, [r7, #4]
}
 800038a:	4618      	mov	r0, r3
 800038c:	3718      	adds	r7, #24
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <main>:

#include "debug.h"


int main(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
	int i = 0;
 800039a:	2300      	movs	r3, #0
 800039c:	607b      	str	r3, [r7, #4]
	sysInit();
 800039e:	f000 f9c5 	bl	800072c <sysInit>
	while(1)
	{
		if(SystemTicktimer > 100)
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <main+0x50>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b64      	cmp	r3, #100	; 0x64
 80003a8:	d9fb      	bls.n	80003a2 <main+0xe>
		{
			SystemTicktimer = 0;
 80003aa:	4b0e      	ldr	r3, [pc, #56]	; (80003e4 <main+0x50>)
 80003ac:	2200      	movs	r2, #0
 80003ae:	601a      	str	r2, [r3, #0]
			i++;
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	3301      	adds	r3, #1
 80003b4:	607b      	str	r3, [r7, #4]
			if(i%2)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f003 0301 	and.w	r3, r3, #1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d009      	beq.n	80003d4 <main+0x40>
			{
				GPIOD->BSRR |= GPIO_BSRR_BS12;
 80003c0:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <main+0x54>)
 80003c2:	699b      	ldr	r3, [r3, #24]
 80003c4:	4a08      	ldr	r2, [pc, #32]	; (80003e8 <main+0x54>)
 80003c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80003ca:	6193      	str	r3, [r2, #24]
				printf("123\r\n");
 80003cc:	4807      	ldr	r0, [pc, #28]	; (80003ec <main+0x58>)
 80003ce:	f000 fa99 	bl	8000904 <puts>
 80003d2:	e7e6      	b.n	80003a2 <main+0xe>
			}
			else
			{
				GPIOD->BSRR |= GPIO_BSRR_BR12;
 80003d4:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <main+0x54>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <main+0x54>)
 80003da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003de:	6193      	str	r3, [r2, #24]
		if(SystemTicktimer > 100)
 80003e0:	e7df      	b.n	80003a2 <main+0xe>
 80003e2:	bf00      	nop
 80003e4:	20000084 	.word	0x20000084
 80003e8:	40020c00 	.word	0x40020c00
 80003ec:	08001134 	.word	0x08001134

080003f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b086      	sub	sp, #24
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	60f8      	str	r0, [r7, #12]
 80003f8:	60b9      	str	r1, [r7, #8]
 80003fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fc:	2300      	movs	r3, #0
 80003fe:	617b      	str	r3, [r7, #20]
 8000400:	e00a      	b.n	8000418 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000402:	f3af 8000 	nop.w
 8000406:	4601      	mov	r1, r0
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	60ba      	str	r2, [r7, #8]
 800040e:	b2ca      	uxtb	r2, r1
 8000410:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	3301      	adds	r3, #1
 8000416:	617b      	str	r3, [r7, #20]
 8000418:	697a      	ldr	r2, [r7, #20]
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	429a      	cmp	r2, r3
 800041e:	dbf0      	blt.n	8000402 <_read+0x12>
	}

return len;
 8000420:	687b      	ldr	r3, [r7, #4]
}
 8000422:	4618      	mov	r0, r3
 8000424:	3718      	adds	r7, #24
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_close>:
	}
	return len;
}

int _close(int file)
{
 800042a:	b480      	push	{r7}
 800042c:	b083      	sub	sp, #12
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
	return -1;
 8000432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000436:	4618      	mov	r0, r3
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000440:	4770      	bx	lr

08000442 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000442:	b480      	push	{r7}
 8000444:	b083      	sub	sp, #12
 8000446:	af00      	add	r7, sp, #0
 8000448:	6078      	str	r0, [r7, #4]
 800044a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800044c:	683b      	ldr	r3, [r7, #0]
 800044e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000452:	605a      	str	r2, [r3, #4]
	return 0;
 8000454:	2300      	movs	r3, #0
}
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000460:	4770      	bx	lr

08000462 <_isatty>:

int _isatty(int file)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
	return 1;
 800046a:	2301      	movs	r3, #1
}
 800046c:	4618      	mov	r0, r3
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr

08000478 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000478:	b480      	push	{r7}
 800047a:	b085      	sub	sp, #20
 800047c:	af00      	add	r7, sp, #0
 800047e:	60f8      	str	r0, [r7, #12]
 8000480:	60b9      	str	r1, [r7, #8]
 8000482:	607a      	str	r2, [r7, #4]
	return 0;
 8000484:	2300      	movs	r3, #0
}
 8000486:	4618      	mov	r0, r3
 8000488:	3714      	adds	r7, #20
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
	...

08000494 <__NVIC_SetPriority>:
{
 8000494:	b480      	push	{r7}
 8000496:	b083      	sub	sp, #12
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	6039      	str	r1, [r7, #0]
 800049e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80004a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	db0a      	blt.n	80004be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	b2da      	uxtb	r2, r3
 80004ac:	490c      	ldr	r1, [pc, #48]	; (80004e0 <__NVIC_SetPriority+0x4c>)
 80004ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004b2:	0112      	lsls	r2, r2, #4
 80004b4:	b2d2      	uxtb	r2, r2
 80004b6:	440b      	add	r3, r1
 80004b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80004bc:	e00a      	b.n	80004d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004be:	683b      	ldr	r3, [r7, #0]
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	4908      	ldr	r1, [pc, #32]	; (80004e4 <__NVIC_SetPriority+0x50>)
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	f003 030f 	and.w	r3, r3, #15
 80004ca:	3b04      	subs	r3, #4
 80004cc:	0112      	lsls	r2, r2, #4
 80004ce:	b2d2      	uxtb	r2, r2
 80004d0:	440b      	add	r3, r1
 80004d2:	761a      	strb	r2, [r3, #24]
}
 80004d4:	bf00      	nop
 80004d6:	370c      	adds	r7, #12
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr
 80004e0:	e000e100 	.word	0xe000e100
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <SysTick_Config>:
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	3b01      	subs	r3, #1
 80004f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004f8:	d301      	bcc.n	80004fe <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80004fa:	2301      	movs	r3, #1
 80004fc:	e00f      	b.n	800051e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004fe:	4a0a      	ldr	r2, [pc, #40]	; (8000528 <SysTick_Config+0x40>)
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	3b01      	subs	r3, #1
 8000504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000506:	210f      	movs	r1, #15
 8000508:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800050c:	f7ff ffc2 	bl	8000494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <SysTick_Config+0x40>)
 8000512:	2200      	movs	r2, #0
 8000514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <SysTick_Config+0x40>)
 8000518:	2207      	movs	r2, #7
 800051a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	3708      	adds	r7, #8
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	e000e010 	.word	0xe000e010

0800052c <SysTick_Handler>:
#include "sysinit.h"

volatile uint32_t SystemTicktimer = 0;

void SysTick_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
	SystemTicktimer++;
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <SysTick_Handler+0x18>)
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	3301      	adds	r3, #1
 8000536:	4a03      	ldr	r2, [pc, #12]	; (8000544 <SysTick_Handler+0x18>)
 8000538:	6013      	str	r3, [r2, #0]
}
 800053a:	bf00      	nop
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr
 8000544:	20000084 	.word	0x20000084

08000548 <initRCC>:


int initRCC(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
	uint32_t tmp;
	//enable clock power
	RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800054e:	4b5d      	ldr	r3, [pc, #372]	; (80006c4 <initRCC+0x17c>)
 8000550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000552:	4a5c      	ldr	r2, [pc, #368]	; (80006c4 <initRCC+0x17c>)
 8000554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000558:	6413      	str	r3, [r2, #64]	; 0x40

	//
	PWR->CR |= PWR_CR_VOS;
 800055a:	4b5b      	ldr	r3, [pc, #364]	; (80006c8 <initRCC+0x180>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	4a5a      	ldr	r2, [pc, #360]	; (80006c8 <initRCC+0x180>)
 8000560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000564:	6013      	str	r3, [r2, #0]

	RCC->CR |= RCC_CR_HSEON;
 8000566:	4b57      	ldr	r3, [pc, #348]	; (80006c4 <initRCC+0x17c>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a56      	ldr	r2, [pc, #344]	; (80006c4 <initRCC+0x17c>)
 800056c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000570:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_HSERDY));
 8000572:	bf00      	nop
 8000574:	4b53      	ldr	r3, [pc, #332]	; (80006c4 <initRCC+0x17c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0f9      	beq.n	8000574 <initRCC+0x2c>

	//disable PLL
	RCC->CR &= ~RCC_CR_PLLON;
 8000580:	4b50      	ldr	r3, [pc, #320]	; (80006c4 <initRCC+0x17c>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a4f      	ldr	r2, [pc, #316]	; (80006c4 <initRCC+0x17c>)
 8000586:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800058a:	6013      	str	r3, [r2, #0]
	while(RCC->CR & RCC_CR_PLLRDY);
 800058c:	bf00      	nop
 800058e:	4b4d      	ldr	r3, [pc, #308]	; (80006c4 <initRCC+0x17c>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000596:	2b00      	cmp	r3, #0
 8000598:	d1f9      	bne.n	800058e <initRCC+0x46>
	// PLLM == 4 (BIT2)
	// PLMN == 168
	// PLLP == 2
	// PLLQ == 7
	// PLLR == 2
	RCC->PLLCFGR = (RCC_PLLCFGR_PLLSRC_HSE | RCC_PLLCFGR_PLLM_2 | (168 << RCC_PLLCFGR_PLLN_Pos) | ((2 >> 1) - 1) << RCC_PLLCFGR_PLLP_Pos | ( 7 << RCC_PLLCFGR_PLLQ_Pos));
 800059a:	4b4a      	ldr	r3, [pc, #296]	; (80006c4 <initRCC+0x17c>)
 800059c:	4a4b      	ldr	r2, [pc, #300]	; (80006cc <initRCC+0x184>)
 800059e:	605a      	str	r2, [r3, #4]

	//enable PLL
	RCC->CR |= RCC_CR_PLLON;
 80005a0:	4b48      	ldr	r3, [pc, #288]	; (80006c4 <initRCC+0x17c>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a47      	ldr	r2, [pc, #284]	; (80006c4 <initRCC+0x17c>)
 80005a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005aa:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY));
 80005ac:	bf00      	nop
 80005ae:	4b45      	ldr	r3, [pc, #276]	; (80006c4 <initRCC+0x17c>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <initRCC+0x66>

	if((FLASH->ACR & FLASH_ACR_LATENCY) < FLASH_ACR_LATENCY_5WS)
 80005ba:	4b45      	ldr	r3, [pc, #276]	; (80006d0 <initRCC+0x188>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	f003 030f 	and.w	r3, r3, #15
 80005c2:	2b04      	cmp	r3, #4
 80005c4:	d80e      	bhi.n	80005e4 <initRCC+0x9c>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 80005c6:	4b42      	ldr	r3, [pc, #264]	; (80006d0 <initRCC+0x188>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4a41      	ldr	r2, [pc, #260]	; (80006d0 <initRCC+0x188>)
 80005cc:	f043 0305 	orr.w	r3, r3, #5
 80005d0:	6013      	str	r3, [r2, #0]
		if((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_5WS)
 80005d2:	4b3f      	ldr	r3, [pc, #252]	; (80006d0 <initRCC+0x188>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	f003 030f 	and.w	r3, r3, #15
 80005da:	2b05      	cmp	r3, #5
 80005dc:	d002      	beq.n	80005e4 <initRCC+0x9c>
		{
			return -1;
 80005de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005e2:	e06a      	b.n	80006ba <initRCC+0x172>
		}
	}

	//X3 why, but in HAL
	RCC->CFGR |= RCC_CFGR_PPRE1_DIV16;
 80005e4:	4b37      	ldr	r3, [pc, #220]	; (80006c4 <initRCC+0x17c>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	4a36      	ldr	r2, [pc, #216]	; (80006c4 <initRCC+0x17c>)
 80005ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80005ee:	6093      	str	r3, [r2, #8]
	RCC->CFGR |= RCC_CFGR_PPRE2_DIV16;
 80005f0:	4b34      	ldr	r3, [pc, #208]	; (80006c4 <initRCC+0x17c>)
 80005f2:	689b      	ldr	r3, [r3, #8]
 80005f4:	4a33      	ldr	r2, [pc, #204]	; (80006c4 <initRCC+0x17c>)
 80005f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80005fa:	6093      	str	r3, [r2, #8]

	//ABHPresc = 1
	tmp = RCC->CFGR;
 80005fc:	4b31      	ldr	r3, [pc, #196]	; (80006c4 <initRCC+0x17c>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	607b      	str	r3, [r7, #4]
	tmp &= ~RCC_CFGR_HPRE;
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000608:	607b      	str	r3, [r7, #4]
	tmp |= RCC_CFGR_HPRE_DIV1;
	RCC->CFGR = tmp;
 800060a:	4a2e      	ldr	r2, [pc, #184]	; (80006c4 <initRCC+0x17c>)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	6093      	str	r3, [r2, #8]

	//set PPL as systemclock
	tmp = RCC->CFGR;
 8000610:	4b2c      	ldr	r3, [pc, #176]	; (80006c4 <initRCC+0x17c>)
 8000612:	689b      	ldr	r3, [r3, #8]
 8000614:	607b      	str	r3, [r7, #4]
	tmp &= RCC_CFGR_SW;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f003 0303 	and.w	r3, r3, #3
 800061c:	607b      	str	r3, [r7, #4]
	tmp |= RCC_CFGR_SW_PLL;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	f043 0302 	orr.w	r3, r3, #2
 8000624:	607b      	str	r3, [r7, #4]
	RCC->CFGR |= tmp;
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <initRCC+0x17c>)
 8000628:	689a      	ldr	r2, [r3, #8]
 800062a:	4926      	ldr	r1, [pc, #152]	; (80006c4 <initRCC+0x17c>)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	4313      	orrs	r3, r2
 8000630:	608b      	str	r3, [r1, #8]
	while(!(RCC->CFGR & RCC_CFGR_SWS_PLL));
 8000632:	bf00      	nop
 8000634:	4b23      	ldr	r3, [pc, #140]	; (80006c4 <initRCC+0x17c>)
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	f003 0308 	and.w	r3, r3, #8
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0f9      	beq.n	8000634 <initRCC+0xec>

	if((FLASH->ACR & FLASH_ACR_LATENCY) < FLASH_ACR_LATENCY_5WS)
 8000640:	4b23      	ldr	r3, [pc, #140]	; (80006d0 <initRCC+0x188>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f003 030f 	and.w	r3, r3, #15
 8000648:	2b04      	cmp	r3, #4
 800064a:	d80e      	bhi.n	800066a <initRCC+0x122>
	{
		FLASH->ACR |= FLASH_ACR_LATENCY_5WS;
 800064c:	4b20      	ldr	r3, [pc, #128]	; (80006d0 <initRCC+0x188>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a1f      	ldr	r2, [pc, #124]	; (80006d0 <initRCC+0x188>)
 8000652:	f043 0305 	orr.w	r3, r3, #5
 8000656:	6013      	str	r3, [r2, #0]
		if((FLASH->ACR & FLASH_ACR_LATENCY) != FLASH_ACR_LATENCY_5WS)
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <initRCC+0x188>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f003 030f 	and.w	r3, r3, #15
 8000660:	2b05      	cmp	r3, #5
 8000662:	d002      	beq.n	800066a <initRCC+0x122>
		{
			return -1;
 8000664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000668:	e027      	b.n	80006ba <initRCC+0x172>
		}
	}

	tmp = RCC->CFGR;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <initRCC+0x17c>)
 800066c:	689b      	ldr	r3, [r3, #8]
 800066e:	607b      	str	r3, [r7, #4]
	tmp &= ~RCC_CFGR_PPRE1;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000676:	607b      	str	r3, [r7, #4]
	tmp &= ~RCC_CFGR_PPRE2;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800067e:	607b      	str	r3, [r7, #4]
	tmp |= RCC_CFGR_PPRE1_DIV4;
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8000686:	607b      	str	r3, [r7, #4]
	tmp |= RCC_CFGR_PPRE2_DIV2;
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800068e:	607b      	str	r3, [r7, #4]
	RCC->CFGR = tmp;
 8000690:	4a0c      	ldr	r2, [pc, #48]	; (80006c4 <initRCC+0x17c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6093      	str	r3, [r2, #8]

	//RCC->APB1ENR |= RCC_APB1ENR_USBEN;
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;
 8000696:	4b0b      	ldr	r3, [pc, #44]	; (80006c4 <initRCC+0x17c>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a0a      	ldr	r2, [pc, #40]	; (80006c4 <initRCC+0x17c>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30

	SystemCoreClockUpdate();
 80006a2:	f7ff fdb7 	bl	8000214 <SystemCoreClockUpdate>
	//	set systick timer to 1 ms delay
	SysTick_Config(SystemCoreClock / 200);
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <initRCC+0x18c>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <initRCC+0x190>)
 80006ac:	fba2 2303 	umull	r2, r3, r2, r3
 80006b0:	099b      	lsrs	r3, r3, #6
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff18 	bl	80004e8 <SysTick_Config>

	return 0;
 80006b8:	2300      	movs	r3, #0
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800
 80006c8:	40007000 	.word	0x40007000
 80006cc:	07402a04 	.word	0x07402a04
 80006d0:	40023c00 	.word	0x40023c00
 80006d4:	20000000 	.word	0x20000000
 80006d8:	51eb851f 	.word	0x51eb851f

080006dc <initGPIO>:

void initGPIO(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
	GPIOD->MODER &= ~GPIO_MODER_MODER12;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <initGPIO+0x4c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a10      	ldr	r2, [pc, #64]	; (8000728 <initGPIO+0x4c>)
 80006e6:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80006ea:	6013      	str	r3, [r2, #0]
	GPIOD->MODER  |= GPIO_MODER_MODER12_0; //gp output
 80006ec:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <initGPIO+0x4c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a0d      	ldr	r2, [pc, #52]	; (8000728 <initGPIO+0x4c>)
 80006f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006f6:	6013      	str	r3, [r2, #0]

	GPIOD->OTYPER &= ~GPIO_OTYPER_OT12; //push pull
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <initGPIO+0x4c>)
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	4a0a      	ldr	r2, [pc, #40]	; (8000728 <initGPIO+0x4c>)
 80006fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000702:	6053      	str	r3, [r2, #4]

	GPIOD->OSPEEDR |= GPIO_OSPEEDR_OSPEED12; //very h speed
 8000704:	4b08      	ldr	r3, [pc, #32]	; (8000728 <initGPIO+0x4c>)
 8000706:	689b      	ldr	r3, [r3, #8]
 8000708:	4a07      	ldr	r2, [pc, #28]	; (8000728 <initGPIO+0x4c>)
 800070a:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
 800070e:	6093      	str	r3, [r2, #8]

	GPIOD->PUPDR &= ~GPIO_PUPDR_PUPD12; //no pull up or down
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <initGPIO+0x4c>)
 8000712:	68db      	ldr	r3, [r3, #12]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <initGPIO+0x4c>)
 8000716:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800071a:	60d3      	str	r3, [r2, #12]

}
 800071c:	bf00      	nop
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40020c00 	.word	0x40020c00

0800072c <sysInit>:

void sysInit(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
	initRCC();
 8000730:	f7ff ff0a 	bl	8000548 <initRCC>
	initGPIO();
 8000734:	f7ff ffd2 	bl	80006dc <initGPIO>
}
 8000738:	bf00      	nop
 800073a:	bd80      	pop	{r7, pc}

0800073c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b084      	sub	sp, #16
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <_sbrk+0x50>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d102      	bne.n	8000752 <_sbrk+0x16>
		heap_end = &end;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <_sbrk+0x50>)
 800074e:	4a10      	ldr	r2, [pc, #64]	; (8000790 <_sbrk+0x54>)
 8000750:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <_sbrk+0x50>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <_sbrk+0x50>)
 800075a:	681a      	ldr	r2, [r3, #0]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	4413      	add	r3, r2
 8000760:	466a      	mov	r2, sp
 8000762:	4293      	cmp	r3, r2
 8000764:	d907      	bls.n	8000776 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000766:	f000 f83f 	bl	80007e8 <__errno>
 800076a:	4602      	mov	r2, r0
 800076c:	230c      	movs	r3, #12
 800076e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000774:	e006      	b.n	8000784 <_sbrk+0x48>
	}

	heap_end += incr;
 8000776:	4b05      	ldr	r3, [pc, #20]	; (800078c <_sbrk+0x50>)
 8000778:	681a      	ldr	r2, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4413      	add	r3, r2
 800077e:	4a03      	ldr	r2, [pc, #12]	; (800078c <_sbrk+0x50>)
 8000780:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000782:	68fb      	ldr	r3, [r7, #12]
}
 8000784:	4618      	mov	r0, r3
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000088 	.word	0x20000088
 8000790:	20000098 	.word	0x20000098

08000794 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000796:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800079a:	490e      	ldr	r1, [pc, #56]	; (80007d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800079c:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <LoopForever+0xe>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007a0:	e002      	b.n	80007a8 <LoopCopyDataInit>

080007a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007a6:	3304      	adds	r3, #4

080007a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007ac:	d3f9      	bcc.n	80007a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ae:	4a0b      	ldr	r2, [pc, #44]	; (80007dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80007b0:	4c0b      	ldr	r4, [pc, #44]	; (80007e0 <LoopForever+0x16>)
  movs r3, #0
 80007b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007b4:	e001      	b.n	80007ba <LoopFillZerobss>

080007b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b8:	3204      	adds	r2, #4

080007ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007bc:	d3fb      	bcc.n	80007b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80007be:	f7ff fd13 	bl	80001e8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80007c2:	f000 f817 	bl	80007f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007c6:	f7ff fde5 	bl	8000394 <main>

080007ca <LoopForever>:

LoopForever:
    b LoopForever
 80007ca:	e7fe      	b.n	80007ca <LoopForever>
  ldr   r0, =_estack
 80007cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007d4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80007d8:	080011b8 	.word	0x080011b8
  ldr r2, =_sbss
 80007dc:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80007e0:	20000098 	.word	0x20000098

080007e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e4:	e7fe      	b.n	80007e4 <ADC_IRQHandler>
	...

080007e8 <__errno>:
 80007e8:	4b01      	ldr	r3, [pc, #4]	; (80007f0 <__errno+0x8>)
 80007ea:	6818      	ldr	r0, [r3, #0]
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	20000004 	.word	0x20000004

080007f4 <__libc_init_array>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	4e0d      	ldr	r6, [pc, #52]	; (800082c <__libc_init_array+0x38>)
 80007f8:	4c0d      	ldr	r4, [pc, #52]	; (8000830 <__libc_init_array+0x3c>)
 80007fa:	1ba4      	subs	r4, r4, r6
 80007fc:	10a4      	asrs	r4, r4, #2
 80007fe:	2500      	movs	r5, #0
 8000800:	42a5      	cmp	r5, r4
 8000802:	d109      	bne.n	8000818 <__libc_init_array+0x24>
 8000804:	4e0b      	ldr	r6, [pc, #44]	; (8000834 <__libc_init_array+0x40>)
 8000806:	4c0c      	ldr	r4, [pc, #48]	; (8000838 <__libc_init_array+0x44>)
 8000808:	f000 fc88 	bl	800111c <_init>
 800080c:	1ba4      	subs	r4, r4, r6
 800080e:	10a4      	asrs	r4, r4, #2
 8000810:	2500      	movs	r5, #0
 8000812:	42a5      	cmp	r5, r4
 8000814:	d105      	bne.n	8000822 <__libc_init_array+0x2e>
 8000816:	bd70      	pop	{r4, r5, r6, pc}
 8000818:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800081c:	4798      	blx	r3
 800081e:	3501      	adds	r5, #1
 8000820:	e7ee      	b.n	8000800 <__libc_init_array+0xc>
 8000822:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000826:	4798      	blx	r3
 8000828:	3501      	adds	r5, #1
 800082a:	e7f2      	b.n	8000812 <__libc_init_array+0x1e>
 800082c:	080011b0 	.word	0x080011b0
 8000830:	080011b0 	.word	0x080011b0
 8000834:	080011b0 	.word	0x080011b0
 8000838:	080011b4 	.word	0x080011b4

0800083c <memset>:
 800083c:	4402      	add	r2, r0
 800083e:	4603      	mov	r3, r0
 8000840:	4293      	cmp	r3, r2
 8000842:	d100      	bne.n	8000846 <memset+0xa>
 8000844:	4770      	bx	lr
 8000846:	f803 1b01 	strb.w	r1, [r3], #1
 800084a:	e7f9      	b.n	8000840 <memset+0x4>

0800084c <_puts_r>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	460e      	mov	r6, r1
 8000850:	4605      	mov	r5, r0
 8000852:	b118      	cbz	r0, 800085c <_puts_r+0x10>
 8000854:	6983      	ldr	r3, [r0, #24]
 8000856:	b90b      	cbnz	r3, 800085c <_puts_r+0x10>
 8000858:	f000 fa0c 	bl	8000c74 <__sinit>
 800085c:	69ab      	ldr	r3, [r5, #24]
 800085e:	68ac      	ldr	r4, [r5, #8]
 8000860:	b913      	cbnz	r3, 8000868 <_puts_r+0x1c>
 8000862:	4628      	mov	r0, r5
 8000864:	f000 fa06 	bl	8000c74 <__sinit>
 8000868:	4b23      	ldr	r3, [pc, #140]	; (80008f8 <_puts_r+0xac>)
 800086a:	429c      	cmp	r4, r3
 800086c:	d117      	bne.n	800089e <_puts_r+0x52>
 800086e:	686c      	ldr	r4, [r5, #4]
 8000870:	89a3      	ldrh	r3, [r4, #12]
 8000872:	071b      	lsls	r3, r3, #28
 8000874:	d51d      	bpl.n	80008b2 <_puts_r+0x66>
 8000876:	6923      	ldr	r3, [r4, #16]
 8000878:	b1db      	cbz	r3, 80008b2 <_puts_r+0x66>
 800087a:	3e01      	subs	r6, #1
 800087c:	68a3      	ldr	r3, [r4, #8]
 800087e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000882:	3b01      	subs	r3, #1
 8000884:	60a3      	str	r3, [r4, #8]
 8000886:	b9e9      	cbnz	r1, 80008c4 <_puts_r+0x78>
 8000888:	2b00      	cmp	r3, #0
 800088a:	da2e      	bge.n	80008ea <_puts_r+0x9e>
 800088c:	4622      	mov	r2, r4
 800088e:	210a      	movs	r1, #10
 8000890:	4628      	mov	r0, r5
 8000892:	f000 f83f 	bl	8000914 <__swbuf_r>
 8000896:	3001      	adds	r0, #1
 8000898:	d011      	beq.n	80008be <_puts_r+0x72>
 800089a:	200a      	movs	r0, #10
 800089c:	e011      	b.n	80008c2 <_puts_r+0x76>
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <_puts_r+0xb0>)
 80008a0:	429c      	cmp	r4, r3
 80008a2:	d101      	bne.n	80008a8 <_puts_r+0x5c>
 80008a4:	68ac      	ldr	r4, [r5, #8]
 80008a6:	e7e3      	b.n	8000870 <_puts_r+0x24>
 80008a8:	4b15      	ldr	r3, [pc, #84]	; (8000900 <_puts_r+0xb4>)
 80008aa:	429c      	cmp	r4, r3
 80008ac:	bf08      	it	eq
 80008ae:	68ec      	ldreq	r4, [r5, #12]
 80008b0:	e7de      	b.n	8000870 <_puts_r+0x24>
 80008b2:	4621      	mov	r1, r4
 80008b4:	4628      	mov	r0, r5
 80008b6:	f000 f87f 	bl	80009b8 <__swsetup_r>
 80008ba:	2800      	cmp	r0, #0
 80008bc:	d0dd      	beq.n	800087a <_puts_r+0x2e>
 80008be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80008c2:	bd70      	pop	{r4, r5, r6, pc}
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	da04      	bge.n	80008d2 <_puts_r+0x86>
 80008c8:	69a2      	ldr	r2, [r4, #24]
 80008ca:	429a      	cmp	r2, r3
 80008cc:	dc06      	bgt.n	80008dc <_puts_r+0x90>
 80008ce:	290a      	cmp	r1, #10
 80008d0:	d004      	beq.n	80008dc <_puts_r+0x90>
 80008d2:	6823      	ldr	r3, [r4, #0]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	6022      	str	r2, [r4, #0]
 80008d8:	7019      	strb	r1, [r3, #0]
 80008da:	e7cf      	b.n	800087c <_puts_r+0x30>
 80008dc:	4622      	mov	r2, r4
 80008de:	4628      	mov	r0, r5
 80008e0:	f000 f818 	bl	8000914 <__swbuf_r>
 80008e4:	3001      	adds	r0, #1
 80008e6:	d1c9      	bne.n	800087c <_puts_r+0x30>
 80008e8:	e7e9      	b.n	80008be <_puts_r+0x72>
 80008ea:	6823      	ldr	r3, [r4, #0]
 80008ec:	200a      	movs	r0, #10
 80008ee:	1c5a      	adds	r2, r3, #1
 80008f0:	6022      	str	r2, [r4, #0]
 80008f2:	7018      	strb	r0, [r3, #0]
 80008f4:	e7e5      	b.n	80008c2 <_puts_r+0x76>
 80008f6:	bf00      	nop
 80008f8:	08001170 	.word	0x08001170
 80008fc:	08001190 	.word	0x08001190
 8000900:	08001150 	.word	0x08001150

08000904 <puts>:
 8000904:	4b02      	ldr	r3, [pc, #8]	; (8000910 <puts+0xc>)
 8000906:	4601      	mov	r1, r0
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	f7ff bf9f 	b.w	800084c <_puts_r>
 800090e:	bf00      	nop
 8000910:	20000004 	.word	0x20000004

08000914 <__swbuf_r>:
 8000914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000916:	460e      	mov	r6, r1
 8000918:	4614      	mov	r4, r2
 800091a:	4605      	mov	r5, r0
 800091c:	b118      	cbz	r0, 8000926 <__swbuf_r+0x12>
 800091e:	6983      	ldr	r3, [r0, #24]
 8000920:	b90b      	cbnz	r3, 8000926 <__swbuf_r+0x12>
 8000922:	f000 f9a7 	bl	8000c74 <__sinit>
 8000926:	4b21      	ldr	r3, [pc, #132]	; (80009ac <__swbuf_r+0x98>)
 8000928:	429c      	cmp	r4, r3
 800092a:	d12a      	bne.n	8000982 <__swbuf_r+0x6e>
 800092c:	686c      	ldr	r4, [r5, #4]
 800092e:	69a3      	ldr	r3, [r4, #24]
 8000930:	60a3      	str	r3, [r4, #8]
 8000932:	89a3      	ldrh	r3, [r4, #12]
 8000934:	071a      	lsls	r2, r3, #28
 8000936:	d52e      	bpl.n	8000996 <__swbuf_r+0x82>
 8000938:	6923      	ldr	r3, [r4, #16]
 800093a:	b363      	cbz	r3, 8000996 <__swbuf_r+0x82>
 800093c:	6923      	ldr	r3, [r4, #16]
 800093e:	6820      	ldr	r0, [r4, #0]
 8000940:	1ac0      	subs	r0, r0, r3
 8000942:	6963      	ldr	r3, [r4, #20]
 8000944:	b2f6      	uxtb	r6, r6
 8000946:	4283      	cmp	r3, r0
 8000948:	4637      	mov	r7, r6
 800094a:	dc04      	bgt.n	8000956 <__swbuf_r+0x42>
 800094c:	4621      	mov	r1, r4
 800094e:	4628      	mov	r0, r5
 8000950:	f000 f926 	bl	8000ba0 <_fflush_r>
 8000954:	bb28      	cbnz	r0, 80009a2 <__swbuf_r+0x8e>
 8000956:	68a3      	ldr	r3, [r4, #8]
 8000958:	3b01      	subs	r3, #1
 800095a:	60a3      	str	r3, [r4, #8]
 800095c:	6823      	ldr	r3, [r4, #0]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	6022      	str	r2, [r4, #0]
 8000962:	701e      	strb	r6, [r3, #0]
 8000964:	6963      	ldr	r3, [r4, #20]
 8000966:	3001      	adds	r0, #1
 8000968:	4283      	cmp	r3, r0
 800096a:	d004      	beq.n	8000976 <__swbuf_r+0x62>
 800096c:	89a3      	ldrh	r3, [r4, #12]
 800096e:	07db      	lsls	r3, r3, #31
 8000970:	d519      	bpl.n	80009a6 <__swbuf_r+0x92>
 8000972:	2e0a      	cmp	r6, #10
 8000974:	d117      	bne.n	80009a6 <__swbuf_r+0x92>
 8000976:	4621      	mov	r1, r4
 8000978:	4628      	mov	r0, r5
 800097a:	f000 f911 	bl	8000ba0 <_fflush_r>
 800097e:	b190      	cbz	r0, 80009a6 <__swbuf_r+0x92>
 8000980:	e00f      	b.n	80009a2 <__swbuf_r+0x8e>
 8000982:	4b0b      	ldr	r3, [pc, #44]	; (80009b0 <__swbuf_r+0x9c>)
 8000984:	429c      	cmp	r4, r3
 8000986:	d101      	bne.n	800098c <__swbuf_r+0x78>
 8000988:	68ac      	ldr	r4, [r5, #8]
 800098a:	e7d0      	b.n	800092e <__swbuf_r+0x1a>
 800098c:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <__swbuf_r+0xa0>)
 800098e:	429c      	cmp	r4, r3
 8000990:	bf08      	it	eq
 8000992:	68ec      	ldreq	r4, [r5, #12]
 8000994:	e7cb      	b.n	800092e <__swbuf_r+0x1a>
 8000996:	4621      	mov	r1, r4
 8000998:	4628      	mov	r0, r5
 800099a:	f000 f80d 	bl	80009b8 <__swsetup_r>
 800099e:	2800      	cmp	r0, #0
 80009a0:	d0cc      	beq.n	800093c <__swbuf_r+0x28>
 80009a2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80009a6:	4638      	mov	r0, r7
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	bf00      	nop
 80009ac:	08001170 	.word	0x08001170
 80009b0:	08001190 	.word	0x08001190
 80009b4:	08001150 	.word	0x08001150

080009b8 <__swsetup_r>:
 80009b8:	4b32      	ldr	r3, [pc, #200]	; (8000a84 <__swsetup_r+0xcc>)
 80009ba:	b570      	push	{r4, r5, r6, lr}
 80009bc:	681d      	ldr	r5, [r3, #0]
 80009be:	4606      	mov	r6, r0
 80009c0:	460c      	mov	r4, r1
 80009c2:	b125      	cbz	r5, 80009ce <__swsetup_r+0x16>
 80009c4:	69ab      	ldr	r3, [r5, #24]
 80009c6:	b913      	cbnz	r3, 80009ce <__swsetup_r+0x16>
 80009c8:	4628      	mov	r0, r5
 80009ca:	f000 f953 	bl	8000c74 <__sinit>
 80009ce:	4b2e      	ldr	r3, [pc, #184]	; (8000a88 <__swsetup_r+0xd0>)
 80009d0:	429c      	cmp	r4, r3
 80009d2:	d10f      	bne.n	80009f4 <__swsetup_r+0x3c>
 80009d4:	686c      	ldr	r4, [r5, #4]
 80009d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009da:	b29a      	uxth	r2, r3
 80009dc:	0715      	lsls	r5, r2, #28
 80009de:	d42c      	bmi.n	8000a3a <__swsetup_r+0x82>
 80009e0:	06d0      	lsls	r0, r2, #27
 80009e2:	d411      	bmi.n	8000a08 <__swsetup_r+0x50>
 80009e4:	2209      	movs	r2, #9
 80009e6:	6032      	str	r2, [r6, #0]
 80009e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009ec:	81a3      	strh	r3, [r4, #12]
 80009ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009f2:	e03e      	b.n	8000a72 <__swsetup_r+0xba>
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <__swsetup_r+0xd4>)
 80009f6:	429c      	cmp	r4, r3
 80009f8:	d101      	bne.n	80009fe <__swsetup_r+0x46>
 80009fa:	68ac      	ldr	r4, [r5, #8]
 80009fc:	e7eb      	b.n	80009d6 <__swsetup_r+0x1e>
 80009fe:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <__swsetup_r+0xd8>)
 8000a00:	429c      	cmp	r4, r3
 8000a02:	bf08      	it	eq
 8000a04:	68ec      	ldreq	r4, [r5, #12]
 8000a06:	e7e6      	b.n	80009d6 <__swsetup_r+0x1e>
 8000a08:	0751      	lsls	r1, r2, #29
 8000a0a:	d512      	bpl.n	8000a32 <__swsetup_r+0x7a>
 8000a0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000a0e:	b141      	cbz	r1, 8000a22 <__swsetup_r+0x6a>
 8000a10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000a14:	4299      	cmp	r1, r3
 8000a16:	d002      	beq.n	8000a1e <__swsetup_r+0x66>
 8000a18:	4630      	mov	r0, r6
 8000a1a:	f000 fa19 	bl	8000e50 <_free_r>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	6363      	str	r3, [r4, #52]	; 0x34
 8000a22:	89a3      	ldrh	r3, [r4, #12]
 8000a24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000a28:	81a3      	strh	r3, [r4, #12]
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	6063      	str	r3, [r4, #4]
 8000a2e:	6923      	ldr	r3, [r4, #16]
 8000a30:	6023      	str	r3, [r4, #0]
 8000a32:	89a3      	ldrh	r3, [r4, #12]
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	81a3      	strh	r3, [r4, #12]
 8000a3a:	6923      	ldr	r3, [r4, #16]
 8000a3c:	b94b      	cbnz	r3, 8000a52 <__swsetup_r+0x9a>
 8000a3e:	89a3      	ldrh	r3, [r4, #12]
 8000a40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000a44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000a48:	d003      	beq.n	8000a52 <__swsetup_r+0x9a>
 8000a4a:	4621      	mov	r1, r4
 8000a4c:	4630      	mov	r0, r6
 8000a4e:	f000 f9bf 	bl	8000dd0 <__smakebuf_r>
 8000a52:	89a2      	ldrh	r2, [r4, #12]
 8000a54:	f012 0301 	ands.w	r3, r2, #1
 8000a58:	d00c      	beq.n	8000a74 <__swsetup_r+0xbc>
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	60a3      	str	r3, [r4, #8]
 8000a5e:	6963      	ldr	r3, [r4, #20]
 8000a60:	425b      	negs	r3, r3
 8000a62:	61a3      	str	r3, [r4, #24]
 8000a64:	6923      	ldr	r3, [r4, #16]
 8000a66:	b953      	cbnz	r3, 8000a7e <__swsetup_r+0xc6>
 8000a68:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a6c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8000a70:	d1ba      	bne.n	80009e8 <__swsetup_r+0x30>
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
 8000a74:	0792      	lsls	r2, r2, #30
 8000a76:	bf58      	it	pl
 8000a78:	6963      	ldrpl	r3, [r4, #20]
 8000a7a:	60a3      	str	r3, [r4, #8]
 8000a7c:	e7f2      	b.n	8000a64 <__swsetup_r+0xac>
 8000a7e:	2000      	movs	r0, #0
 8000a80:	e7f7      	b.n	8000a72 <__swsetup_r+0xba>
 8000a82:	bf00      	nop
 8000a84:	20000004 	.word	0x20000004
 8000a88:	08001170 	.word	0x08001170
 8000a8c:	08001190 	.word	0x08001190
 8000a90:	08001150 	.word	0x08001150

08000a94 <__sflush_r>:
 8000a94:	898a      	ldrh	r2, [r1, #12]
 8000a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a9a:	4605      	mov	r5, r0
 8000a9c:	0710      	lsls	r0, r2, #28
 8000a9e:	460c      	mov	r4, r1
 8000aa0:	d458      	bmi.n	8000b54 <__sflush_r+0xc0>
 8000aa2:	684b      	ldr	r3, [r1, #4]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	dc05      	bgt.n	8000ab4 <__sflush_r+0x20>
 8000aa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	dc02      	bgt.n	8000ab4 <__sflush_r+0x20>
 8000aae:	2000      	movs	r0, #0
 8000ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000ab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d0f9      	beq.n	8000aae <__sflush_r+0x1a>
 8000aba:	2300      	movs	r3, #0
 8000abc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000ac0:	682f      	ldr	r7, [r5, #0]
 8000ac2:	6a21      	ldr	r1, [r4, #32]
 8000ac4:	602b      	str	r3, [r5, #0]
 8000ac6:	d032      	beq.n	8000b2e <__sflush_r+0x9a>
 8000ac8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000aca:	89a3      	ldrh	r3, [r4, #12]
 8000acc:	075a      	lsls	r2, r3, #29
 8000ace:	d505      	bpl.n	8000adc <__sflush_r+0x48>
 8000ad0:	6863      	ldr	r3, [r4, #4]
 8000ad2:	1ac0      	subs	r0, r0, r3
 8000ad4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000ad6:	b10b      	cbz	r3, 8000adc <__sflush_r+0x48>
 8000ad8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ada:	1ac0      	subs	r0, r0, r3
 8000adc:	2300      	movs	r3, #0
 8000ade:	4602      	mov	r2, r0
 8000ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000ae2:	6a21      	ldr	r1, [r4, #32]
 8000ae4:	4628      	mov	r0, r5
 8000ae6:	47b0      	blx	r6
 8000ae8:	1c43      	adds	r3, r0, #1
 8000aea:	89a3      	ldrh	r3, [r4, #12]
 8000aec:	d106      	bne.n	8000afc <__sflush_r+0x68>
 8000aee:	6829      	ldr	r1, [r5, #0]
 8000af0:	291d      	cmp	r1, #29
 8000af2:	d848      	bhi.n	8000b86 <__sflush_r+0xf2>
 8000af4:	4a29      	ldr	r2, [pc, #164]	; (8000b9c <__sflush_r+0x108>)
 8000af6:	40ca      	lsrs	r2, r1
 8000af8:	07d6      	lsls	r6, r2, #31
 8000afa:	d544      	bpl.n	8000b86 <__sflush_r+0xf2>
 8000afc:	2200      	movs	r2, #0
 8000afe:	6062      	str	r2, [r4, #4]
 8000b00:	04d9      	lsls	r1, r3, #19
 8000b02:	6922      	ldr	r2, [r4, #16]
 8000b04:	6022      	str	r2, [r4, #0]
 8000b06:	d504      	bpl.n	8000b12 <__sflush_r+0x7e>
 8000b08:	1c42      	adds	r2, r0, #1
 8000b0a:	d101      	bne.n	8000b10 <__sflush_r+0x7c>
 8000b0c:	682b      	ldr	r3, [r5, #0]
 8000b0e:	b903      	cbnz	r3, 8000b12 <__sflush_r+0x7e>
 8000b10:	6560      	str	r0, [r4, #84]	; 0x54
 8000b12:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000b14:	602f      	str	r7, [r5, #0]
 8000b16:	2900      	cmp	r1, #0
 8000b18:	d0c9      	beq.n	8000aae <__sflush_r+0x1a>
 8000b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d002      	beq.n	8000b28 <__sflush_r+0x94>
 8000b22:	4628      	mov	r0, r5
 8000b24:	f000 f994 	bl	8000e50 <_free_r>
 8000b28:	2000      	movs	r0, #0
 8000b2a:	6360      	str	r0, [r4, #52]	; 0x34
 8000b2c:	e7c0      	b.n	8000ab0 <__sflush_r+0x1c>
 8000b2e:	2301      	movs	r3, #1
 8000b30:	4628      	mov	r0, r5
 8000b32:	47b0      	blx	r6
 8000b34:	1c41      	adds	r1, r0, #1
 8000b36:	d1c8      	bne.n	8000aca <__sflush_r+0x36>
 8000b38:	682b      	ldr	r3, [r5, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0c5      	beq.n	8000aca <__sflush_r+0x36>
 8000b3e:	2b1d      	cmp	r3, #29
 8000b40:	d001      	beq.n	8000b46 <__sflush_r+0xb2>
 8000b42:	2b16      	cmp	r3, #22
 8000b44:	d101      	bne.n	8000b4a <__sflush_r+0xb6>
 8000b46:	602f      	str	r7, [r5, #0]
 8000b48:	e7b1      	b.n	8000aae <__sflush_r+0x1a>
 8000b4a:	89a3      	ldrh	r3, [r4, #12]
 8000b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b50:	81a3      	strh	r3, [r4, #12]
 8000b52:	e7ad      	b.n	8000ab0 <__sflush_r+0x1c>
 8000b54:	690f      	ldr	r7, [r1, #16]
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d0a9      	beq.n	8000aae <__sflush_r+0x1a>
 8000b5a:	0793      	lsls	r3, r2, #30
 8000b5c:	680e      	ldr	r6, [r1, #0]
 8000b5e:	bf08      	it	eq
 8000b60:	694b      	ldreq	r3, [r1, #20]
 8000b62:	600f      	str	r7, [r1, #0]
 8000b64:	bf18      	it	ne
 8000b66:	2300      	movne	r3, #0
 8000b68:	eba6 0807 	sub.w	r8, r6, r7
 8000b6c:	608b      	str	r3, [r1, #8]
 8000b6e:	f1b8 0f00 	cmp.w	r8, #0
 8000b72:	dd9c      	ble.n	8000aae <__sflush_r+0x1a>
 8000b74:	4643      	mov	r3, r8
 8000b76:	463a      	mov	r2, r7
 8000b78:	6a21      	ldr	r1, [r4, #32]
 8000b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000b7c:	4628      	mov	r0, r5
 8000b7e:	47b0      	blx	r6
 8000b80:	2800      	cmp	r0, #0
 8000b82:	dc06      	bgt.n	8000b92 <__sflush_r+0xfe>
 8000b84:	89a3      	ldrh	r3, [r4, #12]
 8000b86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b8a:	81a3      	strh	r3, [r4, #12]
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b90:	e78e      	b.n	8000ab0 <__sflush_r+0x1c>
 8000b92:	4407      	add	r7, r0
 8000b94:	eba8 0800 	sub.w	r8, r8, r0
 8000b98:	e7e9      	b.n	8000b6e <__sflush_r+0xda>
 8000b9a:	bf00      	nop
 8000b9c:	20400001 	.word	0x20400001

08000ba0 <_fflush_r>:
 8000ba0:	b538      	push	{r3, r4, r5, lr}
 8000ba2:	690b      	ldr	r3, [r1, #16]
 8000ba4:	4605      	mov	r5, r0
 8000ba6:	460c      	mov	r4, r1
 8000ba8:	b1db      	cbz	r3, 8000be2 <_fflush_r+0x42>
 8000baa:	b118      	cbz	r0, 8000bb4 <_fflush_r+0x14>
 8000bac:	6983      	ldr	r3, [r0, #24]
 8000bae:	b90b      	cbnz	r3, 8000bb4 <_fflush_r+0x14>
 8000bb0:	f000 f860 	bl	8000c74 <__sinit>
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <_fflush_r+0x48>)
 8000bb6:	429c      	cmp	r4, r3
 8000bb8:	d109      	bne.n	8000bce <_fflush_r+0x2e>
 8000bba:	686c      	ldr	r4, [r5, #4]
 8000bbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000bc0:	b17b      	cbz	r3, 8000be2 <_fflush_r+0x42>
 8000bc2:	4621      	mov	r1, r4
 8000bc4:	4628      	mov	r0, r5
 8000bc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bca:	f7ff bf63 	b.w	8000a94 <__sflush_r>
 8000bce:	4b07      	ldr	r3, [pc, #28]	; (8000bec <_fflush_r+0x4c>)
 8000bd0:	429c      	cmp	r4, r3
 8000bd2:	d101      	bne.n	8000bd8 <_fflush_r+0x38>
 8000bd4:	68ac      	ldr	r4, [r5, #8]
 8000bd6:	e7f1      	b.n	8000bbc <_fflush_r+0x1c>
 8000bd8:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <_fflush_r+0x50>)
 8000bda:	429c      	cmp	r4, r3
 8000bdc:	bf08      	it	eq
 8000bde:	68ec      	ldreq	r4, [r5, #12]
 8000be0:	e7ec      	b.n	8000bbc <_fflush_r+0x1c>
 8000be2:	2000      	movs	r0, #0
 8000be4:	bd38      	pop	{r3, r4, r5, pc}
 8000be6:	bf00      	nop
 8000be8:	08001170 	.word	0x08001170
 8000bec:	08001190 	.word	0x08001190
 8000bf0:	08001150 	.word	0x08001150

08000bf4 <std>:
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	b510      	push	{r4, lr}
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8000bfe:	6083      	str	r3, [r0, #8]
 8000c00:	8181      	strh	r1, [r0, #12]
 8000c02:	6643      	str	r3, [r0, #100]	; 0x64
 8000c04:	81c2      	strh	r2, [r0, #14]
 8000c06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000c0a:	6183      	str	r3, [r0, #24]
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	2208      	movs	r2, #8
 8000c10:	305c      	adds	r0, #92	; 0x5c
 8000c12:	f7ff fe13 	bl	800083c <memset>
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <std+0x38>)
 8000c18:	6263      	str	r3, [r4, #36]	; 0x24
 8000c1a:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <std+0x3c>)
 8000c1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <std+0x40>)
 8000c20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000c22:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <std+0x44>)
 8000c24:	6224      	str	r4, [r4, #32]
 8000c26:	6323      	str	r3, [r4, #48]	; 0x30
 8000c28:	bd10      	pop	{r4, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08000fc1 	.word	0x08000fc1
 8000c30:	08000fe3 	.word	0x08000fe3
 8000c34:	0800101b 	.word	0x0800101b
 8000c38:	0800103f 	.word	0x0800103f

08000c3c <_cleanup_r>:
 8000c3c:	4901      	ldr	r1, [pc, #4]	; (8000c44 <_cleanup_r+0x8>)
 8000c3e:	f000 b885 	b.w	8000d4c <_fwalk_reent>
 8000c42:	bf00      	nop
 8000c44:	08000ba1 	.word	0x08000ba1

08000c48 <__sfmoreglue>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	1e4a      	subs	r2, r1, #1
 8000c4c:	2568      	movs	r5, #104	; 0x68
 8000c4e:	4355      	muls	r5, r2
 8000c50:	460e      	mov	r6, r1
 8000c52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000c56:	f000 f949 	bl	8000eec <_malloc_r>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	b140      	cbz	r0, 8000c70 <__sfmoreglue+0x28>
 8000c5e:	2100      	movs	r1, #0
 8000c60:	e9c0 1600 	strd	r1, r6, [r0]
 8000c64:	300c      	adds	r0, #12
 8000c66:	60a0      	str	r0, [r4, #8]
 8000c68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000c6c:	f7ff fde6 	bl	800083c <memset>
 8000c70:	4620      	mov	r0, r4
 8000c72:	bd70      	pop	{r4, r5, r6, pc}

08000c74 <__sinit>:
 8000c74:	6983      	ldr	r3, [r0, #24]
 8000c76:	b510      	push	{r4, lr}
 8000c78:	4604      	mov	r4, r0
 8000c7a:	bb33      	cbnz	r3, 8000cca <__sinit+0x56>
 8000c7c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8000c80:	6503      	str	r3, [r0, #80]	; 0x50
 8000c82:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <__sinit+0x58>)
 8000c84:	4a12      	ldr	r2, [pc, #72]	; (8000cd0 <__sinit+0x5c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	6282      	str	r2, [r0, #40]	; 0x28
 8000c8a:	4298      	cmp	r0, r3
 8000c8c:	bf04      	itt	eq
 8000c8e:	2301      	moveq	r3, #1
 8000c90:	6183      	streq	r3, [r0, #24]
 8000c92:	f000 f81f 	bl	8000cd4 <__sfp>
 8000c96:	6060      	str	r0, [r4, #4]
 8000c98:	4620      	mov	r0, r4
 8000c9a:	f000 f81b 	bl	8000cd4 <__sfp>
 8000c9e:	60a0      	str	r0, [r4, #8]
 8000ca0:	4620      	mov	r0, r4
 8000ca2:	f000 f817 	bl	8000cd4 <__sfp>
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60e0      	str	r0, [r4, #12]
 8000caa:	2104      	movs	r1, #4
 8000cac:	6860      	ldr	r0, [r4, #4]
 8000cae:	f7ff ffa1 	bl	8000bf4 <std>
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2109      	movs	r1, #9
 8000cb6:	68a0      	ldr	r0, [r4, #8]
 8000cb8:	f7ff ff9c 	bl	8000bf4 <std>
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	2112      	movs	r1, #18
 8000cc0:	68e0      	ldr	r0, [r4, #12]
 8000cc2:	f7ff ff97 	bl	8000bf4 <std>
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	61a3      	str	r3, [r4, #24]
 8000cca:	bd10      	pop	{r4, pc}
 8000ccc:	0800114c 	.word	0x0800114c
 8000cd0:	08000c3d 	.word	0x08000c3d

08000cd4 <__sfp>:
 8000cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd6:	4b1b      	ldr	r3, [pc, #108]	; (8000d44 <__sfp+0x70>)
 8000cd8:	681e      	ldr	r6, [r3, #0]
 8000cda:	69b3      	ldr	r3, [r6, #24]
 8000cdc:	4607      	mov	r7, r0
 8000cde:	b913      	cbnz	r3, 8000ce6 <__sfp+0x12>
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	f7ff ffc7 	bl	8000c74 <__sinit>
 8000ce6:	3648      	adds	r6, #72	; 0x48
 8000ce8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000cec:	3b01      	subs	r3, #1
 8000cee:	d503      	bpl.n	8000cf8 <__sfp+0x24>
 8000cf0:	6833      	ldr	r3, [r6, #0]
 8000cf2:	b133      	cbz	r3, 8000d02 <__sfp+0x2e>
 8000cf4:	6836      	ldr	r6, [r6, #0]
 8000cf6:	e7f7      	b.n	8000ce8 <__sfp+0x14>
 8000cf8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000cfc:	b16d      	cbz	r5, 8000d1a <__sfp+0x46>
 8000cfe:	3468      	adds	r4, #104	; 0x68
 8000d00:	e7f4      	b.n	8000cec <__sfp+0x18>
 8000d02:	2104      	movs	r1, #4
 8000d04:	4638      	mov	r0, r7
 8000d06:	f7ff ff9f 	bl	8000c48 <__sfmoreglue>
 8000d0a:	6030      	str	r0, [r6, #0]
 8000d0c:	2800      	cmp	r0, #0
 8000d0e:	d1f1      	bne.n	8000cf4 <__sfp+0x20>
 8000d10:	230c      	movs	r3, #12
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	4604      	mov	r4, r0
 8000d16:	4620      	mov	r0, r4
 8000d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <__sfp+0x74>)
 8000d1c:	6665      	str	r5, [r4, #100]	; 0x64
 8000d1e:	e9c4 5500 	strd	r5, r5, [r4]
 8000d22:	60a5      	str	r5, [r4, #8]
 8000d24:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8000d28:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	4629      	mov	r1, r5
 8000d30:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000d34:	f7ff fd82 	bl	800083c <memset>
 8000d38:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000d3c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000d40:	e7e9      	b.n	8000d16 <__sfp+0x42>
 8000d42:	bf00      	nop
 8000d44:	0800114c 	.word	0x0800114c
 8000d48:	ffff0001 	.word	0xffff0001

08000d4c <_fwalk_reent>:
 8000d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d50:	4680      	mov	r8, r0
 8000d52:	4689      	mov	r9, r1
 8000d54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000d58:	2600      	movs	r6, #0
 8000d5a:	b914      	cbnz	r4, 8000d62 <_fwalk_reent+0x16>
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000d62:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8000d66:	3f01      	subs	r7, #1
 8000d68:	d501      	bpl.n	8000d6e <_fwalk_reent+0x22>
 8000d6a:	6824      	ldr	r4, [r4, #0]
 8000d6c:	e7f5      	b.n	8000d5a <_fwalk_reent+0xe>
 8000d6e:	89ab      	ldrh	r3, [r5, #12]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d907      	bls.n	8000d84 <_fwalk_reent+0x38>
 8000d74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000d78:	3301      	adds	r3, #1
 8000d7a:	d003      	beq.n	8000d84 <_fwalk_reent+0x38>
 8000d7c:	4629      	mov	r1, r5
 8000d7e:	4640      	mov	r0, r8
 8000d80:	47c8      	blx	r9
 8000d82:	4306      	orrs	r6, r0
 8000d84:	3568      	adds	r5, #104	; 0x68
 8000d86:	e7ee      	b.n	8000d66 <_fwalk_reent+0x1a>

08000d88 <__swhatbuf_r>:
 8000d88:	b570      	push	{r4, r5, r6, lr}
 8000d8a:	460e      	mov	r6, r1
 8000d8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d90:	2900      	cmp	r1, #0
 8000d92:	b096      	sub	sp, #88	; 0x58
 8000d94:	4614      	mov	r4, r2
 8000d96:	461d      	mov	r5, r3
 8000d98:	da07      	bge.n	8000daa <__swhatbuf_r+0x22>
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	602b      	str	r3, [r5, #0]
 8000d9e:	89b3      	ldrh	r3, [r6, #12]
 8000da0:	061a      	lsls	r2, r3, #24
 8000da2:	d410      	bmi.n	8000dc6 <__swhatbuf_r+0x3e>
 8000da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da8:	e00e      	b.n	8000dc8 <__swhatbuf_r+0x40>
 8000daa:	466a      	mov	r2, sp
 8000dac:	f000 f96e 	bl	800108c <_fstat_r>
 8000db0:	2800      	cmp	r0, #0
 8000db2:	dbf2      	blt.n	8000d9a <__swhatbuf_r+0x12>
 8000db4:	9a01      	ldr	r2, [sp, #4]
 8000db6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8000dba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8000dbe:	425a      	negs	r2, r3
 8000dc0:	415a      	adcs	r2, r3
 8000dc2:	602a      	str	r2, [r5, #0]
 8000dc4:	e7ee      	b.n	8000da4 <__swhatbuf_r+0x1c>
 8000dc6:	2340      	movs	r3, #64	; 0x40
 8000dc8:	2000      	movs	r0, #0
 8000dca:	6023      	str	r3, [r4, #0]
 8000dcc:	b016      	add	sp, #88	; 0x58
 8000dce:	bd70      	pop	{r4, r5, r6, pc}

08000dd0 <__smakebuf_r>:
 8000dd0:	898b      	ldrh	r3, [r1, #12]
 8000dd2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000dd4:	079d      	lsls	r5, r3, #30
 8000dd6:	4606      	mov	r6, r0
 8000dd8:	460c      	mov	r4, r1
 8000dda:	d507      	bpl.n	8000dec <__smakebuf_r+0x1c>
 8000ddc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8000de0:	6023      	str	r3, [r4, #0]
 8000de2:	6123      	str	r3, [r4, #16]
 8000de4:	2301      	movs	r3, #1
 8000de6:	6163      	str	r3, [r4, #20]
 8000de8:	b002      	add	sp, #8
 8000dea:	bd70      	pop	{r4, r5, r6, pc}
 8000dec:	ab01      	add	r3, sp, #4
 8000dee:	466a      	mov	r2, sp
 8000df0:	f7ff ffca 	bl	8000d88 <__swhatbuf_r>
 8000df4:	9900      	ldr	r1, [sp, #0]
 8000df6:	4605      	mov	r5, r0
 8000df8:	4630      	mov	r0, r6
 8000dfa:	f000 f877 	bl	8000eec <_malloc_r>
 8000dfe:	b948      	cbnz	r0, 8000e14 <__smakebuf_r+0x44>
 8000e00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e04:	059a      	lsls	r2, r3, #22
 8000e06:	d4ef      	bmi.n	8000de8 <__smakebuf_r+0x18>
 8000e08:	f023 0303 	bic.w	r3, r3, #3
 8000e0c:	f043 0302 	orr.w	r3, r3, #2
 8000e10:	81a3      	strh	r3, [r4, #12]
 8000e12:	e7e3      	b.n	8000ddc <__smakebuf_r+0xc>
 8000e14:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <__smakebuf_r+0x7c>)
 8000e16:	62b3      	str	r3, [r6, #40]	; 0x28
 8000e18:	89a3      	ldrh	r3, [r4, #12]
 8000e1a:	6020      	str	r0, [r4, #0]
 8000e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e20:	81a3      	strh	r3, [r4, #12]
 8000e22:	9b00      	ldr	r3, [sp, #0]
 8000e24:	6163      	str	r3, [r4, #20]
 8000e26:	9b01      	ldr	r3, [sp, #4]
 8000e28:	6120      	str	r0, [r4, #16]
 8000e2a:	b15b      	cbz	r3, 8000e44 <__smakebuf_r+0x74>
 8000e2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000e30:	4630      	mov	r0, r6
 8000e32:	f000 f93d 	bl	80010b0 <_isatty_r>
 8000e36:	b128      	cbz	r0, 8000e44 <__smakebuf_r+0x74>
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	f023 0303 	bic.w	r3, r3, #3
 8000e3e:	f043 0301 	orr.w	r3, r3, #1
 8000e42:	81a3      	strh	r3, [r4, #12]
 8000e44:	89a3      	ldrh	r3, [r4, #12]
 8000e46:	431d      	orrs	r5, r3
 8000e48:	81a5      	strh	r5, [r4, #12]
 8000e4a:	e7cd      	b.n	8000de8 <__smakebuf_r+0x18>
 8000e4c:	08000c3d 	.word	0x08000c3d

08000e50 <_free_r>:
 8000e50:	b538      	push	{r3, r4, r5, lr}
 8000e52:	4605      	mov	r5, r0
 8000e54:	2900      	cmp	r1, #0
 8000e56:	d045      	beq.n	8000ee4 <_free_r+0x94>
 8000e58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e5c:	1f0c      	subs	r4, r1, #4
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	bfb8      	it	lt
 8000e62:	18e4      	addlt	r4, r4, r3
 8000e64:	f000 f946 	bl	80010f4 <__malloc_lock>
 8000e68:	4a1f      	ldr	r2, [pc, #124]	; (8000ee8 <_free_r+0x98>)
 8000e6a:	6813      	ldr	r3, [r2, #0]
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	b933      	cbnz	r3, 8000e7e <_free_r+0x2e>
 8000e70:	6063      	str	r3, [r4, #4]
 8000e72:	6014      	str	r4, [r2, #0]
 8000e74:	4628      	mov	r0, r5
 8000e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e7a:	f000 b93c 	b.w	80010f6 <__malloc_unlock>
 8000e7e:	42a3      	cmp	r3, r4
 8000e80:	d90c      	bls.n	8000e9c <_free_r+0x4c>
 8000e82:	6821      	ldr	r1, [r4, #0]
 8000e84:	1862      	adds	r2, r4, r1
 8000e86:	4293      	cmp	r3, r2
 8000e88:	bf04      	itt	eq
 8000e8a:	681a      	ldreq	r2, [r3, #0]
 8000e8c:	685b      	ldreq	r3, [r3, #4]
 8000e8e:	6063      	str	r3, [r4, #4]
 8000e90:	bf04      	itt	eq
 8000e92:	1852      	addeq	r2, r2, r1
 8000e94:	6022      	streq	r2, [r4, #0]
 8000e96:	6004      	str	r4, [r0, #0]
 8000e98:	e7ec      	b.n	8000e74 <_free_r+0x24>
 8000e9a:	4613      	mov	r3, r2
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	b10a      	cbz	r2, 8000ea4 <_free_r+0x54>
 8000ea0:	42a2      	cmp	r2, r4
 8000ea2:	d9fa      	bls.n	8000e9a <_free_r+0x4a>
 8000ea4:	6819      	ldr	r1, [r3, #0]
 8000ea6:	1858      	adds	r0, r3, r1
 8000ea8:	42a0      	cmp	r0, r4
 8000eaa:	d10b      	bne.n	8000ec4 <_free_r+0x74>
 8000eac:	6820      	ldr	r0, [r4, #0]
 8000eae:	4401      	add	r1, r0
 8000eb0:	1858      	adds	r0, r3, r1
 8000eb2:	4282      	cmp	r2, r0
 8000eb4:	6019      	str	r1, [r3, #0]
 8000eb6:	d1dd      	bne.n	8000e74 <_free_r+0x24>
 8000eb8:	6810      	ldr	r0, [r2, #0]
 8000eba:	6852      	ldr	r2, [r2, #4]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	4401      	add	r1, r0
 8000ec0:	6019      	str	r1, [r3, #0]
 8000ec2:	e7d7      	b.n	8000e74 <_free_r+0x24>
 8000ec4:	d902      	bls.n	8000ecc <_free_r+0x7c>
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	602b      	str	r3, [r5, #0]
 8000eca:	e7d3      	b.n	8000e74 <_free_r+0x24>
 8000ecc:	6820      	ldr	r0, [r4, #0]
 8000ece:	1821      	adds	r1, r4, r0
 8000ed0:	428a      	cmp	r2, r1
 8000ed2:	bf04      	itt	eq
 8000ed4:	6811      	ldreq	r1, [r2, #0]
 8000ed6:	6852      	ldreq	r2, [r2, #4]
 8000ed8:	6062      	str	r2, [r4, #4]
 8000eda:	bf04      	itt	eq
 8000edc:	1809      	addeq	r1, r1, r0
 8000ede:	6021      	streq	r1, [r4, #0]
 8000ee0:	605c      	str	r4, [r3, #4]
 8000ee2:	e7c7      	b.n	8000e74 <_free_r+0x24>
 8000ee4:	bd38      	pop	{r3, r4, r5, pc}
 8000ee6:	bf00      	nop
 8000ee8:	2000008c 	.word	0x2000008c

08000eec <_malloc_r>:
 8000eec:	b570      	push	{r4, r5, r6, lr}
 8000eee:	1ccd      	adds	r5, r1, #3
 8000ef0:	f025 0503 	bic.w	r5, r5, #3
 8000ef4:	3508      	adds	r5, #8
 8000ef6:	2d0c      	cmp	r5, #12
 8000ef8:	bf38      	it	cc
 8000efa:	250c      	movcc	r5, #12
 8000efc:	2d00      	cmp	r5, #0
 8000efe:	4606      	mov	r6, r0
 8000f00:	db01      	blt.n	8000f06 <_malloc_r+0x1a>
 8000f02:	42a9      	cmp	r1, r5
 8000f04:	d903      	bls.n	8000f0e <_malloc_r+0x22>
 8000f06:	230c      	movs	r3, #12
 8000f08:	6033      	str	r3, [r6, #0]
 8000f0a:	2000      	movs	r0, #0
 8000f0c:	bd70      	pop	{r4, r5, r6, pc}
 8000f0e:	f000 f8f1 	bl	80010f4 <__malloc_lock>
 8000f12:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <_malloc_r+0xac>)
 8000f14:	6814      	ldr	r4, [r2, #0]
 8000f16:	4621      	mov	r1, r4
 8000f18:	b991      	cbnz	r1, 8000f40 <_malloc_r+0x54>
 8000f1a:	4c20      	ldr	r4, [pc, #128]	; (8000f9c <_malloc_r+0xb0>)
 8000f1c:	6823      	ldr	r3, [r4, #0]
 8000f1e:	b91b      	cbnz	r3, 8000f28 <_malloc_r+0x3c>
 8000f20:	4630      	mov	r0, r6
 8000f22:	f000 f83d 	bl	8000fa0 <_sbrk_r>
 8000f26:	6020      	str	r0, [r4, #0]
 8000f28:	4629      	mov	r1, r5
 8000f2a:	4630      	mov	r0, r6
 8000f2c:	f000 f838 	bl	8000fa0 <_sbrk_r>
 8000f30:	1c43      	adds	r3, r0, #1
 8000f32:	d124      	bne.n	8000f7e <_malloc_r+0x92>
 8000f34:	230c      	movs	r3, #12
 8000f36:	6033      	str	r3, [r6, #0]
 8000f38:	4630      	mov	r0, r6
 8000f3a:	f000 f8dc 	bl	80010f6 <__malloc_unlock>
 8000f3e:	e7e4      	b.n	8000f0a <_malloc_r+0x1e>
 8000f40:	680b      	ldr	r3, [r1, #0]
 8000f42:	1b5b      	subs	r3, r3, r5
 8000f44:	d418      	bmi.n	8000f78 <_malloc_r+0x8c>
 8000f46:	2b0b      	cmp	r3, #11
 8000f48:	d90f      	bls.n	8000f6a <_malloc_r+0x7e>
 8000f4a:	600b      	str	r3, [r1, #0]
 8000f4c:	50cd      	str	r5, [r1, r3]
 8000f4e:	18cc      	adds	r4, r1, r3
 8000f50:	4630      	mov	r0, r6
 8000f52:	f000 f8d0 	bl	80010f6 <__malloc_unlock>
 8000f56:	f104 000b 	add.w	r0, r4, #11
 8000f5a:	1d23      	adds	r3, r4, #4
 8000f5c:	f020 0007 	bic.w	r0, r0, #7
 8000f60:	1ac3      	subs	r3, r0, r3
 8000f62:	d0d3      	beq.n	8000f0c <_malloc_r+0x20>
 8000f64:	425a      	negs	r2, r3
 8000f66:	50e2      	str	r2, [r4, r3]
 8000f68:	e7d0      	b.n	8000f0c <_malloc_r+0x20>
 8000f6a:	428c      	cmp	r4, r1
 8000f6c:	684b      	ldr	r3, [r1, #4]
 8000f6e:	bf16      	itet	ne
 8000f70:	6063      	strne	r3, [r4, #4]
 8000f72:	6013      	streq	r3, [r2, #0]
 8000f74:	460c      	movne	r4, r1
 8000f76:	e7eb      	b.n	8000f50 <_malloc_r+0x64>
 8000f78:	460c      	mov	r4, r1
 8000f7a:	6849      	ldr	r1, [r1, #4]
 8000f7c:	e7cc      	b.n	8000f18 <_malloc_r+0x2c>
 8000f7e:	1cc4      	adds	r4, r0, #3
 8000f80:	f024 0403 	bic.w	r4, r4, #3
 8000f84:	42a0      	cmp	r0, r4
 8000f86:	d005      	beq.n	8000f94 <_malloc_r+0xa8>
 8000f88:	1a21      	subs	r1, r4, r0
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f000 f808 	bl	8000fa0 <_sbrk_r>
 8000f90:	3001      	adds	r0, #1
 8000f92:	d0cf      	beq.n	8000f34 <_malloc_r+0x48>
 8000f94:	6025      	str	r5, [r4, #0]
 8000f96:	e7db      	b.n	8000f50 <_malloc_r+0x64>
 8000f98:	2000008c 	.word	0x2000008c
 8000f9c:	20000090 	.word	0x20000090

08000fa0 <_sbrk_r>:
 8000fa0:	b538      	push	{r3, r4, r5, lr}
 8000fa2:	4c06      	ldr	r4, [pc, #24]	; (8000fbc <_sbrk_r+0x1c>)
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	4605      	mov	r5, r0
 8000fa8:	4608      	mov	r0, r1
 8000faa:	6023      	str	r3, [r4, #0]
 8000fac:	f7ff fbc6 	bl	800073c <_sbrk>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	d102      	bne.n	8000fba <_sbrk_r+0x1a>
 8000fb4:	6823      	ldr	r3, [r4, #0]
 8000fb6:	b103      	cbz	r3, 8000fba <_sbrk_r+0x1a>
 8000fb8:	602b      	str	r3, [r5, #0]
 8000fba:	bd38      	pop	{r3, r4, r5, pc}
 8000fbc:	20000094 	.word	0x20000094

08000fc0 <__sread>:
 8000fc0:	b510      	push	{r4, lr}
 8000fc2:	460c      	mov	r4, r1
 8000fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000fc8:	f000 f896 	bl	80010f8 <_read_r>
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	bfab      	itete	ge
 8000fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8000fd4:	181b      	addge	r3, r3, r0
 8000fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000fda:	bfac      	ite	ge
 8000fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8000fde:	81a3      	strhlt	r3, [r4, #12]
 8000fe0:	bd10      	pop	{r4, pc}

08000fe2 <__swrite>:
 8000fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fe6:	461f      	mov	r7, r3
 8000fe8:	898b      	ldrh	r3, [r1, #12]
 8000fea:	05db      	lsls	r3, r3, #23
 8000fec:	4605      	mov	r5, r0
 8000fee:	460c      	mov	r4, r1
 8000ff0:	4616      	mov	r6, r2
 8000ff2:	d505      	bpl.n	8001000 <__swrite+0x1e>
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ffc:	f000 f868 	bl	80010d0 <_lseek_r>
 8001000:	89a3      	ldrh	r3, [r4, #12]
 8001002:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001006:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800100a:	81a3      	strh	r3, [r4, #12]
 800100c:	4632      	mov	r2, r6
 800100e:	463b      	mov	r3, r7
 8001010:	4628      	mov	r0, r5
 8001012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001016:	f000 b817 	b.w	8001048 <_write_r>

0800101a <__sseek>:
 800101a:	b510      	push	{r4, lr}
 800101c:	460c      	mov	r4, r1
 800101e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001022:	f000 f855 	bl	80010d0 <_lseek_r>
 8001026:	1c43      	adds	r3, r0, #1
 8001028:	89a3      	ldrh	r3, [r4, #12]
 800102a:	bf15      	itete	ne
 800102c:	6560      	strne	r0, [r4, #84]	; 0x54
 800102e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001036:	81a3      	strheq	r3, [r4, #12]
 8001038:	bf18      	it	ne
 800103a:	81a3      	strhne	r3, [r4, #12]
 800103c:	bd10      	pop	{r4, pc}

0800103e <__sclose>:
 800103e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001042:	f000 b813 	b.w	800106c <_close_r>
	...

08001048 <_write_r>:
 8001048:	b538      	push	{r3, r4, r5, lr}
 800104a:	4c07      	ldr	r4, [pc, #28]	; (8001068 <_write_r+0x20>)
 800104c:	4605      	mov	r5, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4611      	mov	r1, r2
 8001052:	2200      	movs	r2, #0
 8001054:	6022      	str	r2, [r4, #0]
 8001056:	461a      	mov	r2, r3
 8001058:	f7ff f97d 	bl	8000356 <_write>
 800105c:	1c43      	adds	r3, r0, #1
 800105e:	d102      	bne.n	8001066 <_write_r+0x1e>
 8001060:	6823      	ldr	r3, [r4, #0]
 8001062:	b103      	cbz	r3, 8001066 <_write_r+0x1e>
 8001064:	602b      	str	r3, [r5, #0]
 8001066:	bd38      	pop	{r3, r4, r5, pc}
 8001068:	20000094 	.word	0x20000094

0800106c <_close_r>:
 800106c:	b538      	push	{r3, r4, r5, lr}
 800106e:	4c06      	ldr	r4, [pc, #24]	; (8001088 <_close_r+0x1c>)
 8001070:	2300      	movs	r3, #0
 8001072:	4605      	mov	r5, r0
 8001074:	4608      	mov	r0, r1
 8001076:	6023      	str	r3, [r4, #0]
 8001078:	f7ff f9d7 	bl	800042a <_close>
 800107c:	1c43      	adds	r3, r0, #1
 800107e:	d102      	bne.n	8001086 <_close_r+0x1a>
 8001080:	6823      	ldr	r3, [r4, #0]
 8001082:	b103      	cbz	r3, 8001086 <_close_r+0x1a>
 8001084:	602b      	str	r3, [r5, #0]
 8001086:	bd38      	pop	{r3, r4, r5, pc}
 8001088:	20000094 	.word	0x20000094

0800108c <_fstat_r>:
 800108c:	b538      	push	{r3, r4, r5, lr}
 800108e:	4c07      	ldr	r4, [pc, #28]	; (80010ac <_fstat_r+0x20>)
 8001090:	2300      	movs	r3, #0
 8001092:	4605      	mov	r5, r0
 8001094:	4608      	mov	r0, r1
 8001096:	4611      	mov	r1, r2
 8001098:	6023      	str	r3, [r4, #0]
 800109a:	f7ff f9d2 	bl	8000442 <_fstat>
 800109e:	1c43      	adds	r3, r0, #1
 80010a0:	d102      	bne.n	80010a8 <_fstat_r+0x1c>
 80010a2:	6823      	ldr	r3, [r4, #0]
 80010a4:	b103      	cbz	r3, 80010a8 <_fstat_r+0x1c>
 80010a6:	602b      	str	r3, [r5, #0]
 80010a8:	bd38      	pop	{r3, r4, r5, pc}
 80010aa:	bf00      	nop
 80010ac:	20000094 	.word	0x20000094

080010b0 <_isatty_r>:
 80010b0:	b538      	push	{r3, r4, r5, lr}
 80010b2:	4c06      	ldr	r4, [pc, #24]	; (80010cc <_isatty_r+0x1c>)
 80010b4:	2300      	movs	r3, #0
 80010b6:	4605      	mov	r5, r0
 80010b8:	4608      	mov	r0, r1
 80010ba:	6023      	str	r3, [r4, #0]
 80010bc:	f7ff f9d1 	bl	8000462 <_isatty>
 80010c0:	1c43      	adds	r3, r0, #1
 80010c2:	d102      	bne.n	80010ca <_isatty_r+0x1a>
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	b103      	cbz	r3, 80010ca <_isatty_r+0x1a>
 80010c8:	602b      	str	r3, [r5, #0]
 80010ca:	bd38      	pop	{r3, r4, r5, pc}
 80010cc:	20000094 	.word	0x20000094

080010d0 <_lseek_r>:
 80010d0:	b538      	push	{r3, r4, r5, lr}
 80010d2:	4c07      	ldr	r4, [pc, #28]	; (80010f0 <_lseek_r+0x20>)
 80010d4:	4605      	mov	r5, r0
 80010d6:	4608      	mov	r0, r1
 80010d8:	4611      	mov	r1, r2
 80010da:	2200      	movs	r2, #0
 80010dc:	6022      	str	r2, [r4, #0]
 80010de:	461a      	mov	r2, r3
 80010e0:	f7ff f9ca 	bl	8000478 <_lseek>
 80010e4:	1c43      	adds	r3, r0, #1
 80010e6:	d102      	bne.n	80010ee <_lseek_r+0x1e>
 80010e8:	6823      	ldr	r3, [r4, #0]
 80010ea:	b103      	cbz	r3, 80010ee <_lseek_r+0x1e>
 80010ec:	602b      	str	r3, [r5, #0]
 80010ee:	bd38      	pop	{r3, r4, r5, pc}
 80010f0:	20000094 	.word	0x20000094

080010f4 <__malloc_lock>:
 80010f4:	4770      	bx	lr

080010f6 <__malloc_unlock>:
 80010f6:	4770      	bx	lr

080010f8 <_read_r>:
 80010f8:	b538      	push	{r3, r4, r5, lr}
 80010fa:	4c07      	ldr	r4, [pc, #28]	; (8001118 <_read_r+0x20>)
 80010fc:	4605      	mov	r5, r0
 80010fe:	4608      	mov	r0, r1
 8001100:	4611      	mov	r1, r2
 8001102:	2200      	movs	r2, #0
 8001104:	6022      	str	r2, [r4, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	f7ff f972 	bl	80003f0 <_read>
 800110c:	1c43      	adds	r3, r0, #1
 800110e:	d102      	bne.n	8001116 <_read_r+0x1e>
 8001110:	6823      	ldr	r3, [r4, #0]
 8001112:	b103      	cbz	r3, 8001116 <_read_r+0x1e>
 8001114:	602b      	str	r3, [r5, #0]
 8001116:	bd38      	pop	{r3, r4, r5, pc}
 8001118:	20000094 	.word	0x20000094

0800111c <_init>:
 800111c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111e:	bf00      	nop
 8001120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001122:	bc08      	pop	{r3}
 8001124:	469e      	mov	lr, r3
 8001126:	4770      	bx	lr

08001128 <_fini>:
 8001128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800112a:	bf00      	nop
 800112c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800112e:	bc08      	pop	{r3}
 8001130:	469e      	mov	lr, r3
 8001132:	4770      	bx	lr
